<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.sucrelt.dao.UserMapper">

    <resultMap type="cn.sucrelt.domain.User" id="userMap">
        <!--主键字段的对应-->
        <id column="id" property="userId"/>
        <!--非主键字段的对应-->
        <result column="username" property="userName"/>
        <result column="sex" property="userSex"/>
        <result column="address" property="userAddress"/>
        <result column="birthday" property="userBirthday"/>
    </resultMap>

    <!--定义加入Account集合的User对象的resultMap-->
    <resultMap id="userAccountMap" type="cn.sucrelt.domain.User">
        <id property="userId" column="id"></id>
        <result column="username" property="userName"/>
        <result column="address" property="userAddress"/>
        <result column="sex" property="userSex"/>
        <result column="birthday" property="userBirthday"/>
        <!-- collection是用于建立一对多中集合属性的对应关系 property为主表对应实体类中的属性 ofType用于指定集合元素的数据类型 -->
        <collection property="accounts" ofType="cn.sucrelt.domain.Account">
            <id column="aid" property="id"/>
            <result column="uid" property="uid"/>
            <result column="money" property="money"/>
        </collection>
    </resultMap>


    <!-- 根据用户查询所有账户 -->
    <select id="findAllAccountByUser" resultMap="userAccountMap">
        select u.*, a.id as aid, a.uid, a.money
        from user u
        left outer join account a on u.id = a.uid
    </select>

    <!--查询所有-->
    <select id="findAll" resultMap="userMap">
        select *
        from user;
    </select>

    <!--保存用户-->
    <insert id="saveUser" parameterType="cn.sucrelt.domain.User">
        <!-- 配置保存时获取插入的id -->
        <selectKey keyColumn="id" keyProperty="userId" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, birthday, sex, address)
        values (#{userName}, #{userBirthday}, #{userSex}, #{userAddress});
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="cn.sucrelt.domain.User">
        update user
        set username=#{userName},
            birthday=#{userBirthday},
            sex=#{userSex},
            address=#{userAddress}
        where id = #{userId};
    </update>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="Integer">
        delete
        from user
        where id = #{userId};
    </delete>

    <!--根据id查询一个用户信息-->
    <select id="findById" parameterType="Integer" resultMap="userMap">
        select *
        from user
        where id = #{userId};
    </select>

    <!--根据name模糊查询用户-->
    <select id="findByName" parameterType="String" resultMap="userMap">
        <!--  select * from user where username like #{username};  -->
        select *
        from user
        where username like '%${value}%';
    </select>

    <!--查询所有记录条数-->
    <select id="findTotalCount" resultType="int">
        select count(*)
        from user;
    </select>

    <!-- 根据用户名称模糊查询，参数变成一个QueryVo对象了 -->
    <select id="findByVo" resultMap="userMap" parameterType="cn.sucrelt.domain.QueryVo">
        select *
        from user
        where username like #{user.userName};
    </select>
</mapper>